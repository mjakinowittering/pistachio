from pathlib import Path
from schema import Schema, And, Use, SchemaError
from src import pistachio


import pytest


DESCRIBE_SCHEMA = Schema({
    "abspath": And(Use(str)),
    "exists": And(Use(bool)),
    "is_directory": And(Use(bool)),
    "is_file": And(Use(bool)),
    "is_symlink": And(Use(bool)),
    "md5": And(Use(str)),
    "name": And(Use(str))
})


def schema_validation(example, schema):
    """
    Method to confirm with a dictionary matches a schema.
    """
    try:
        schema.validate(example)
        return True
    except SchemaError:
        return False


def setup_module():
    """
    Setup the required resources neccessary to run all the tests.
    """
    with open("example.txt", "w") as fh:
        fh.write("The quick brown fox jumps over the lazy dog\n")
        fh.close()


def teardown_module():
    """
    Remove anything generated by testing.
    """
    Path("README.doc").unlink()
    Path("example.txt").unlink()


def test_describe_schema_directory():
    """
    Test to validate the describe method response for a directory.
    """
    example = pistachio.describe("tests")
    assert schema_validation(example, DESCRIBE_SCHEMA) is True


def test_describe_schema_file():
    """
    Test to validate the describe method response for a file.
    """
    example = pistachio.describe("README.md")
    assert schema_validation(example, DESCRIBE_SCHEMA) is True


def test_describe_schema_symlink():
    """
    Test to validate the describe method response for a symbolic link.
    """
    example = pistachio.describe("README.rst")
    assert schema_validation(example, DESCRIBE_SCHEMA) is True


def test_exists_true():
    """
    Test to confirm the exists method returns True.
    """
    assert pistachio.exists("README.md") is True


def test_exists_false():
    """
    Test to confirm the exists method returns False.
    """
    assert pistachio.exists("LICENSE.md") is False


def test_get_md5_hash():
    """
    Test to confirm the get_md5_hash method returns False.
    """
    md5_hash_str = pistachio.get_md5_hash("example.txt")
    assert md5_hash_str == "37c4b87edffc5d198ff5a185cee7ee09"


def test_get_md5_hash_returns_false():
    """
    Test to confirm the get_md5_hash method returns False.
    """
    with pytest.raises(FileNotFoundError):
        pistachio.get_md5_hash("example.doc")


def test_is_directory_true():
    """
    Test to confirm the is_directory method returns True.
    """
    assert pistachio.is_directory("tests") is True


def test_is_directory_false():
    """
    Test to confirm the is_directory method returns False.
    """
    assert pistachio.is_directory("LICENSE.md") is False


def test_is_file_true():
    """
    Test to confirm the is_file method returns True.
    """
    assert pistachio.is_file("README.md") is True


def test_is_file_false():
    """
    Test to confirm the is_file method returns False.
    """
    assert pistachio.is_file("tests") is False


def test_touch_new_file_true():
    """
    Test to confirm the touch method returns True.
    """
    assert pistachio.touch("README.doc") is True


def test_touch_file_exist_returns_false():
    """
    Test to confirm the touch method returns True.
    """
    assert pistachio.touch("README.md") is False


def test_touch_directory_does_not_exist_returns_false():
    """
    Test to confirm the touch method raised FileNotFoundError exception.
    """
    with pytest.raises(FileNotFoundError):
        pistachio.touch("docs/README.doc")
